# Below properties are needed for maintaining General Configuration
server.port=9091
logging.level.root=INFO
logging.level.org.hibernate.SQL=DEBUG
spring.application.name=<application-name>
spring.main.allow-bean-definition-overriding=true

# Below properties are needed for maintaining Local Database
# PostgreSQL Configuration
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.show-sql=true
spring.datasource.url=jdbc:postgresql://localhost:5432/<database_name>
spring.datasource.username=<your-username>
spring.datasource.password=<your-password>

# MySQL configuration
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
# spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.hibernate.show-sql=true
# spring.datasource.url=jdbc:mysql://mysql:3306/<database_name>
# spring.datasource.username=<your-username>
# spring.datasource.password=<your-password>

# Below properties are needed for maintaining Cloud Database
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.hibernate.show-sql=true

# spring.jpa.database=postgresql
# spring.datasource.driver-class-name=org.postgresql.Driver
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy

# spring.datasource.url=<config-from-cloud>
# spring.datasource.username=<config-from-cloud>
# spring.datasource.password=<config-from-cloud>

# Below properties are needed for maintaining Authentication
# JWT configuration
security.jwt.enabled=true
jwtSecret=<your-secret-key>
jwtExpirationMs=86400000

# OAuth v2 configuration
# GitHub (Optional)
# spring.security.oauth2.client.registration.github.clientId=<your-client-id>
# spring.security.oauth2.client.registration.github.clientSecret=<your-client-secret>

# Google
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.registration.google.clientId=<your-client-id>
spring.security.oauth2.client.registration.google.clientSecret=<your-client-secret>
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=profile email

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://www.googleapis.com/oauth2/v4/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs
spring.security.oauth2.client.provider.google.user-name-attribute=profile

# Below properties are needed for maintaining SMTP
mail.smtp.debug=true
spring.mail.port=587
spring.mail.host=smtp.gmail.com
spring.mail.username=<your-gmail>
spring.mail.password=<your-gmail-password>

spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.socketFactory.port=465
spring.mail.properties.mail.smtp.socketFactory.fallback=false
spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory

spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# Below properties are needed for maintaining Multipart
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk
spring.servlet.multipart.file-size-threshold=2KB
# Max file size
spring.servlet.multipart.max-file-size=10MB
# Max Request Size
spring.servlet.multipart.max-request-size=10MB
# File location
spring.servlet.multipart.location=/tmp


# Below properties are needed for maintaining Kafka (Optional)
# kafka.server=localhost:9092
# kafka.topic.consume=<kafka-topic>
# kafka.group.id=<kafka-group-id>

# Below properties are needed for maintaining Swagger UI (Optional)
# springdoc.api-docs.enabled=true
# springdoc.swagger-ui.disable-swagger-default-url=true
# springdoc.api-docs.path=/api-docs
# springdoc.swagger-ui.path=/<your-swagger-ui-home-url>.html

# Below properties are needed for maintaining Spring Security (Optional)
# ENDPOINTS CORS CONFIGURATION (EndpointCorsProperties)
# endpoints.cors.allow-credentials= # Set whether credentials are supported. When not set, credentials are not supported.
# endpoints.cors.allowed-headers= # Comma-separated list of headers to allow in a request. '*' allows all headers.
# endpoints.cors.allowed-methods=GET # Comma-separated list of methods to allow. '*' allows all methods.
# endpoints.cors.allowed-origins= # Comma-separated list of origins to allow. '*' allows all origins. When not set, CORS support is disabled.
# endpoints.cors.exposed-headers= # Comma-separated list of headers to include in a response.
# endpoints.cors.max-age=1800 # How long, in seconds, the response from a pre-flight request can be cached by clients.